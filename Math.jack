// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array towToThe;
        static int temp_div; //for divide
        /** Initializes the library. */
        function void init() {
        var int i;
        let towToThe = Array.new(16);
        let i = 1;
        let towToThe[0] = 1;

        while(i < 16){
            let towToThe[i] = towToThe[i-1] + towToThe[i-1];
            let i = i + 1;}
        return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if(x<0){
            return -x;}
            else{
            return x;}
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum;
            var int shiftdex;
            var int  i;

            let sum = 0;
            let shiftdex = x;
            let i = 0;
            while(i <16){
                if(Math.bit(y, i)){ 
                    let sum = sum + shiftdex;
                }
                let shiftdex = shiftdex+shiftdex;
                let i = i +1;
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q, res, absX, absY;
		    let temp_div =  Math.abs(x);
            let absX = Math.abs(x);
            let absY = Math.abs(y);

		    if (absY > absX){
		        return 0;
		    }
            let temp_div = absX;
            let q = Math.divide(absX, absY + absY);
            if(temp_div < absY){
                let res =  q + q;}
            else{
                let temp_div = temp_div - absY;
                let res = (q+q) + 1;} 

            if((x > 0) = (y > 0 )){
                return res;}
            else{
                return -res;}

        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y;
            var int j;
            var int s;
            var int s_sequre;
            let y = 0;
            let j = 7; // bit =16, n/2-1 = 7
            while(~(j < 0)){
                let s = y + towToThe[j];
                let s_sequre = s*s;
                if(~(s_sequre > x) & (s_sequre > 0)){
                    let y = s;}
                let j = j - 1;
            }
            return y; 


        }

        /** Returns the greater number. */
        function int max(int a, int b) {
        if (a>b){
            return a;}
        else{
            return b;}
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
        if(a<b){
            return a;}
        else{
            return b;}
        }

        /**Returns true if the i-th bit of x is 1, false otherwise*/ 
        function boolean bit(int x, int i){
          return ~((x & towToThe[i]) = 0); 
        
        }
}
